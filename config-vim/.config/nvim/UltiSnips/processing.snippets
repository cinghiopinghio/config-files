#BASICS
# doc
snippet doc "doc"
/**
 *  ${1:Description}
 *
 *	@author ${2:name}
 *	@since  ${3:`!v strftime("%d/%m/%y %H:%M:%S")`}
 */
${4}
endsnippet

# doc comment
snippet docc "docc"
/**
 *	${1:@private}$0
 */
${2}
endsnippet

# class
snippet class "class"
${1:public }class ${2:`!v fnamemodify(bufname("%"),":t:r")`} ${3:extends}
{
	//--------------------------------------
	//  CONSTRUCTOR
	//--------------------------------------
	public $2 (${4:arguments}) {
		${0:// expression}
	}
}
endsnippet

# package
snippet package "package"
/**
 *  ${1:Description}
 *
 *	@author ${2:$TM_FULLNAME}
 *	@since  ${3:`!v strftime("%d/%m/%y %H:%M:%S")`}
 */
package ${4:package};
endsnippet

# function
snippet fun "fun"
${1:void/private/protected/public}${2: static} ${3:name}(${4}) {
	${5://if not void return null;}
}
${6}
endsnippet

snippet fn "fn"
${1:void }${2:name}(${3}) {
	${4://if not void return null;}
}
${5}
endsnippet

#	constant
snippet const "const"
static final ${1:Object} ${2:VAR_NAM} = ${3};
endsnippet

# var
snippet var "var"
${1:private/public }${2:static }${3:String} ${4:str}${5: =}${6:value};
endsnippet

# var objects
snippet obj "obj"
${1:private/public }${2:Object} ${3:o}${4: = new }$2(${5});
endsnippet

#loop for
snippet for "for"
for (int ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
	${4:$1[$2]}
};
endsnippet

#loop while
snippet while "while"
while (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet

#break
snippet break "break"
break ${1:label};
endsnippet

#case
snippet case "case"
case ${1:expression} :
	${2}
break;
endsnippet

#default
snippet default "default"
default :
	${1}
break;
endsnippet

#switch
snippet switch "switch"
switch(${1:expression}) {
	case '${3:case}':
		${4:// code}
		break;
	${5}
	default:
		${2:// code}
}
endsnippet

#try
snippet try "try"
try {
	${3}
} catch(${1:Exception} ${2:e}) {
}
endsnippet

#try catch finally
snippet tryf "tryf"
try {
	${3}
} catch(${1:Exception} ${2:e}) {
} finally {
}
endsnippet

#throw
snippet throw "throw"
throw new ("${1:Exception()}");
endsnippet

#ternary
snippet ? "?"
? ${1:trueExpression} : ${2:falseExpression}
${3}
endsnippet

snippet if "if"
if (${1:true}) {${2}}
endsnippet

# if ... else
snippet ife "ife"
if (${1:true}) {${2}}
else{${3}}
endsnippet

#get
snippet get "get"
public ${1:String} get${2}() {
	return ${2:fieldName};
}
endsnippet

#set
snippet set "set"
public void set${1}(${2:String} new${1}) {
	${1:fieldName} = new${1};
}
endsnippet

#printIn
snippet println "println"
println("${1:`!v fnamemodify(bufname("%"),":t:r")`}::${2:method}() "${3: +} ${4});
endsnippet

#println string
snippet pr "pr"
println("${1}");
endsnippet

#setup draw
snippet setup "setup"
void setup(){
	${1}
}
void draw(){
	${2}
}
endsnippet

#setup OPENGL
snippet opengl "opengl"
import processing.opengl.*;
import javax.media.opengl.*;
PGraphicsOpenGL pgl;
GL gl;
void setup(){
	size( ${1:300}, ${2:300}, OPENGL );
	colorMode( RGB, 1.0 );
	hint( ENABLE_OPENGL_4X_SMOOTH );
	pgl = (PGraphicsOpenGL) g;
	gl = pgl.gl;
	gl.setSwapInterval(1);
	initGL();
	${3}
}
void draw(){
	pgl.beginGL();
		${4}
	pgl.endGL();
	getOpenGLErrors();
}
void initGL(){
	${5}
}
void getOpenGLErrors(){
	int error = gl.glGetError();
	switch (error){
		case 1280 :
			println("GL_INVALID_ENUM - An invalid enumerant was passed to an OpenGL command.");
		break;
		case 1282 :
			println("GL_INVALID_OPERATION - An OpenGL command was issued that was invalid or inappropriate for the current state.");
		break;
		case 1281 :
			println("GL_INVALID_VALUE - A value was passed to OpenGL that was outside the allowed range.");
		break;
		case 1285 :
			println("GL_OUT_OF_MEMORY - OpenGL was unable to allocate enough memory to process a command.");
		break;
		case 1283 :
			println("GL_STACK_OVERFLOW - A command caused an OpenGL stack to overflow.");
		break;
		case 1284 :
			println("GL_STACK_UNDERFLOW - A command caused an OpenGL stack to underflow.");
		break;
		case 32817 :
			println("GL_TABLE_TOO_LARGE");
		break;
	}
}
endsnippet

#GL Functions
snippet gl "begin gl"
pgl.beginGL();
	${1}
pgl.endGL();
endsnippet

snippet gl "gl swap interval"
// specify the minimum swap interval for buffer swaps.
gl.setSwapInterval(${1:interval});
endsnippet

snippet gl "gl call list"
// execute a display list
gl.glCallList(${1:list});
endsnippet

snippet gl "gl gen buffers"
// import java.nio.IntBuffer;
// import java.nio.FloatBuffer;
// import com.sun.opengl.util.BufferUtil;
// You might need to create four buffers to store vertext data, normal data, texture coordinate data, and indices in vertex arrays
IntBuffer bufferObjects = IntBuffer.allocate(${1:4});
gl.glGenBuffers($1, bufferObjects);
int vertexCount = ${2:3};
int numCoordinates = ${3:3};
// vertexCount * numCoordinates
FloatBuffer vertices = BufferUtil.newFloatBuffer(vertexCount * numCoordinates);
float[] v = {0.0f, 0.0f, 0.0f,
						 1.0f, 0.0f, 0.0f,
						 0.0f, 1.0f, 1.0f};
vertices.put(v);
// Bind the first buffer object ID for use with vertext array data
gl.glBindBuffer(GL.GL_ARRAY_BUFFER, bufferObjects.get(0));
gl.glBufferData(GL.GL_ARRAY_BUFFER, vertexCount * numCoordinates * BufferUtil.SIZEOF_FLOAT, vertices, GL.GL_STATIC_DRAW);
endsnippet

snippet gl "gl bind buffer"
${2:// A buffer ID of zero unbinds a buffer object}
gl.glBindBuffer(GL.GL_ARRAY_BUFFER, ${1:0});
endsnippet

snippet gl "gl delete buffers"
${3:// Parameters are the same for glGenBuffers}
gl.glDeleteBuffers(${1:4}, ${2:bufferObjects});
endsnippet

snippet gl "gl depth mask"
// enable or disable writing into the depth buffer
gl.glDepthMask(${1:flag});
endsnippet

snippet gl "gl load identity"
// replaces the top of the active matrix stack with the identity matrix
gl.glLoadIdentity();
endsnippet

snippet gl "gl tex coord 2f"
// set the current texture coordinates - 2 floats
gl.glTexCoord2f(${1:0.0f}, ${2:0.0f});
endsnippet

snippet gl "gl vertex 2f"
gl.glVertex2f(${1:0.0f}, ${2:0.0f});
endsnippet

snippet gl "gl vertex 3f"
gl.glVertex3f(${1:0.0f}, ${2:0.0f}, ${3:0.0f});
endsnippet

snippet gl "gl translate f"
// multiply the current matrix by a translation matrix
gl.glTranslatef(${1:x}, ${2:y}, ${3:z});
endsnippet

snippet gl "gl rotate f"
// rotate, x-axis, y-axis, z-axiz
gl.glRotatef(${1:angle}, ${2:x}, ${3:y}, ${4:z});
endsnippet

snippet gl "gl scale f"
// multiply the current matrix by a general scaling matrix
gl.glScalef(${1:x}, ${2:y}, ${3:z});
endsnippet

snippet gl "gl color 4f"
gl.glColor4f(${1:red}, ${2:green}, ${3:blue}, ${4:alpha});
endsnippet

snippet gl "gl clear color"
gl.glClearColor(${1:red}, ${2:green}, ${3:blue}, ${4:alpha});
endsnippet

snippet gl "gl color 3f"
gl.glColor3f(${1:red}, ${2:green}, ${3:blue});
endsnippet

snippet gl "gl push matrix"
// spush and pop the current matrix stack
gl.glPushMatrix();
${1}
gl.glPopMatrix();
endsnippet

snippet gl "gl gen lists"
gl.glGenLists(${1:1})
endsnippet

snippet gl "gl flush"
// Empties buffers. Call this when all previous issues commands completed
gl.glFlush();
${1}
endsnippet

snippet gl "gl get error"
println(gl.glGetError());
endsnippet

snippet gl "gl clear"
gl.glClear(${1:GL.GL_COLOR_BUFFER_BIT}${2: | }${3:GL.GL_DEPTH_BUFFER_BIT});
endsnippet

#frame operations
snippet fr "framerate"
frameRate(${1:30});
${2}
endsnippet

snippet fr "frameRate"
frameRate
endsnippet

snippet fr "frameCount"
frameCount
endsnippet

snippet fr "saveFrame"
saveFrame("${1:filename-####}${2:.ext}");
endsnippet

#size
snippet size "normal size"
size(${1:200}, ${2:200}${3:, P3D});
endsnippet

snippet size "opengl size"
size(${1:200}, ${2:200}${3:, OPENGL});
endsnippet

#PRIMITIVES
#color
snippet color "color"
color ${1:c}${2: = color(}${3:value1, }${4:value2, }${5:value3)};
endsnippet

#char
snippet char "char"
char ${1:m}${2: = "}${3:char"};
endsnippet

#float
snippet float "float"
float ${1:f}${2: = }${3:0.0f};
endsnippet

#int
snippet int "int"
int ${1:f}${2: = }${3:0};
endsnippet

#boolean
snippet boolean "boolean"
boolean ${1:b}${2: = }${3:true};
endsnippet

#byte
snippet byte "byte"
byte ${1:b}${2: = }${3:127};
endsnippet

#string
snippet string "string"
String ${1:str}${2: = "}${3:CCCP"};
endsnippet

#array
snippet array "array"
${1:int}[] ${2:numbers}${3: = new $1}[${4:length}];
endsnippet

#object
snippet object "object"
${1:Object} ${2:o}${3: = new $1}(${4});
endsnippet

#curve
snippet curve "curve"
curve(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:x4}, ${8:y4});
endsnippet

snippet curve "curve 3D"
curve(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2}, ${7:x3}, ${8:y3}, ${9:z3}, ${10:x4}, ${11:y4}, ${12:z4});
endsnippet

snippet curve "curve Detail"
curveDetail(${1:detail});
endsnippet

snippet curve "curve point"
curvePoint(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:t});
endsnippet

snippet curve "curve tightness"
curveTightness(${1:squishy});
endsnippet

#bezier
snippet bezier "bezier"
bezier(${1:x1}, ${2:y1}, ${3:cx1}, ${4:cy1}, ${5:cx2}, ${6:cy2}, ${7:x2}, ${8:y2});
endsnippet

snippet bezier "bezier 3D"
bezier(${1:x1}, ${2:y1}, ${3:z1}, ${4:cx1}, ${5:cy1}, ${6:cz1}, ${7:cx2}, ${8:cy2}, ${9:cz2}, ${10:x2}, ${11:y2}, ${12:z2});
endsnippet

snippet bezier "bezier detail"
bezierDetail(${1:detail});
endsnippet

snippet bezier "bezier tangent"
bezierTangent(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:t});
endsnippet

snippet bezier "bezier point"
bezierPoint(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:t});
endsnippet

#vertex
snippet vertex "vertex"
vertex(${1:x}, ${2:y}${3:, }${4:u}${5:, }${6:v});
endsnippet

snippet vertex "vertex 3D"
vertex(${1:x}, ${2:y}, ${3:z}${4:, }${5:u}${6:, }${7:v});
endsnippet

snippet vertex "vertex bezier"
bezierVertex(${1:cx1}, ${2:cy1}, ${3:cx2}, ${4:cy2}, ${5:x}, ${6:y});
endsnippet

snippet vertex "vertex bezier 3D"
bezierVertex(${1:cx1}, ${2:cy1}, ${3:cz1}, ${4:cx2}, ${5:cy2}, ${6:cz2}, ${7:x}, ${8:y}, ${9:z});
endsnippet

snippet vertex "vertex curve"
curveVertex(${1:x}, ${2:y});
endsnippet

snippet vertex "vertex curve 3D"
curveVertex(${1:x}, ${2:y}, ${3:z});
endsnippet

#stroke
snippet stroke "stroke"
stroke(${1:value1}, ${2:value2}, ${3:value3}${4:, }${5:alpha});
endsnippet

snippet stroke "stroke weight"
strokeWeight(${1:1});
endsnippet

snippet stroke "no stroke"
noStroke();
endsnippet

#mouse
snippet mouse "mouse x"
mouseX
endsnippet

snippet mouse "mouse y"
mouseY
endsnippet

snippet mouse "mouse drag"
void mouseDragged(){
	${1}
}
endsnippet

snippet mouse "mouse move"
void mouseMoved(){
	${1}
}
endsnippet

snippet mouse "mouse release"
void mouseReleased(){
	${1}
}
endsnippet

snippet mouse "mouse pressed"
void mousePressed(){
	${1}
}
endsnippet

snippet mouse "mouse pressed?"
mousePressed
endsnippet

snippet mouse "mouse button?"
mouseButton
endsnippet

snippet mouse "pmouse X"
pmouseX
endsnippet

snippet mouse "pmouse Y"
pmouseY
endsnippet

#key
snippet key "keycode?"
keyCode
endsnippet

snippet key "key"
key
endsnippet

snippet key "key released"
void keyReleased(){
	${1}
}
endsnippet

snippet key "key typed"
void keyTyped(){
	${1}
}
endsnippet

snippet key "key pressed"
void keyPressed(){
	${1}
}
endsnippet

snippet key "key pressed?"
keyPressed
endsnippet

#file
snippet file "load string"
loadStrings("${1:filename}");
endsnippet

snippet file "save string"
saveStrings(${1:filename}, ${2:strings});
endsnippet

snippet file "load bytes"
loadBytes("${1:filename}");
endsnippet

snippet file "begin record"
beginRecord(${1:renderer}, ${2:filename});
endsnippet

snippet file "end record"
endRecord();
endsnippet

snippet file "save bytes"
saveBytes(${1:filename}, ${2:bytes});
endsnippet

snippet file "create writer"
createWriter(${1:filename});
endsnippet

snippet file "create reader"
createReader(${1:filename});
endsnippet

#time
snippet time "hour"
hour()
endsnippet

snippet time "milliseconds"
millis()
endsnippet

snippet time "year"
year()
endsnippet

snippet time "minutes"
minutes()
endsnippet

snippet time "month"
month()
endsnippet

snippet time "second"
second()
endsnippet

#matrix
snippet matrix "reset matrix"
translate(${1:x}, ${2:y}, ${3:z});
endsnippet

snippet matrix "print matrix"
printMatrix();
endsnippet

snippet matrix "push matrix"
pushMatrix();
${1:};
popMatrix();
endsnippet

#text
snippet txt "text data"
text(${1:data}, ${2:x}, ${3:y}${4:, }${5:z});
endsnippet

snippet txt "text string data"
text(${1:stringdata}, ${2:x}, ${3:y}, ${4:width}, ${5:height}${6:, }${7:z});
endsnippet

snippet txt "text size"
textSize(${1:size});
endsnippet

snippet txt "text leading"
textLeading(${1:size});
endsnippet

snippet txt "text width"
textWidth(${1:data});
endsnippet

snippet txt "text descent"
textDescent();
endsnippet

snippet txt "text ascent"
textAscent();
endsnippet

snippet txt "font"
PFont ${1:font};
$1 = loadFont("${2:FFScala-32.vlw}");
endsnippet

#load font
snippet txt "load font"
${1:font} = loadFont("${2:FFScala-32.vlw}");
endsnippet

snippet txt "text font"
textFont(${1:font}${2:, }${3:size});
endsnippet

#math
snippet math "tangent"
tan(${1:rad});
endsnippet

snippet math "atan"
atan(${1:rad});
endsnippet

snippet math "atan2"
atan2(${1:rad});
endsnippet

snippet math "sin"
sin(${1:rad});
endsnippet

snippet math "asin"
asin(${1:rad});
endsnippet

snippet math "cos"
cos(${1:rad});
endsnippet

snippet math "acos"
acos(${1:rad});
endsnippet

snippet math "degrees"
degrees(${1:rad});
endsnippet

snippet math "radians"
radians(${1:deg});
endsnippet

snippet math "random seed"
randomSeed(${1:value});
endsnippet

snippet math "random"
random(${1:value1}${2:, }${3:value2});
endsnippet

snippet math "half PI"
HALF_PI
endsnippet

snippet math "2 PI"
TWO_PI
endsnippet

snippet math "PI"
PI
endsnippet

snippet math "pow"
pow(${1:num}, ${2:exponent});
endsnippet

snippet math "floor"
floor(${1:value});
endsnippet

snippet math "sqrt"
sqrt(${1:value});
endsnippet

snippet math "abs"
abs(${1:value});
endsnippet

snippet math "sq"
sq(${1:value});
endsnippet

snippet math "ceil"
ceil(${1:value});
endsnippet

snippet math "exp"
exp(${1:value});
endsnippet

snippet math "round"
round(${1:value}};
endsnippet

snippet math "min"
min(${1:value1}, ${2:value2}${3:, }${4:value3});
endsnippet

snippet math "max"
max(${1:value1}, ${2:value2}${3:, }${4:value3});
endsnippet

snippet math "array max"
max(${1:array});
endsnippet

snippet math "array min"
min(${1:array});
endsnippet

snippet math "logarithm"
log(${1:value});
endsnippet

snippet math "map"
map(${1:value}, ${2:low1}, ${4:high1}, ${5:low2}, ${6:high2});
endsnippet

snippet math "normalize"
norm(${1:value}, ${2:low}, ${3:high});
endsnippet

snippet math "constrain"
constrain(${1:value}, ${2:min}, ${3:max});
endsnippet

snippet math "magnitude of a vector"
mag(${1:a}, ${2:b}${3:, }${4:c});
endsnippet

snippet math "distance"
dist(${1:x1}, ${2:y1}, ${4:x2}, ${5:y2});
endsnippet

snippet math "distance 3D"
dist(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2});
endsnippet

#noise math
snippet noise "set noise"
noise(${1:x}${2:, }${3:y}${4:, }${5:z});
endsnippet

snippet noise "noise detail"
noiseDetail(${1:octaves}${2:, }${3:falloff});
endsnippet

snippet noise "noise seed"
noiseSeed(${1:x});
endsnippet

#material
snippet material "shininess"
shininess(${1:shine});
endsnippet

snippet material "specular"
specular(${1:value1}, ${2:value2}, ${3:value3}${4:, }${5:alpha});
endsnippet

snippet material "ambient"
ambient(${1:value1}, ${2:value2}, ${3:value3});
endsnippet

snippet material "emissive"
emissive(${1:value1}, ${2:value2}, ${3:value3});
endsnippet

#light
snippet light "no light"
noLights();
endsnippet

snippet light "light"
lights();
endsnippet

snippet light "diretional light"
directionalLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:nx}, ${5:ny}, ${6:nz});
endsnippet

snippet light "point light"
pointLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:nx}, ${5:ny}, ${6:nz});
endsnippet

snippet light "falloff light"
lightFalloff(${1:constant}, ${2:linear}, ${3:quadratic});
endsnippet

snippet light "normal light"
normal(${1:nx}, ${2:ny}, ${3:nz});
endsnippet

snippet light "specular light"
lightFalloff(${1:v1}, ${2:v2}, ${3:v3});
endsnippet

snippet light "ambient light"
ambientLight(${1:v1}, ${2:v2}, ${3:v3}${7:, ${4:x}, ${5:y}, ${6:z}});
endsnippet

snippet light "spot light"
spotLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:x}, ${5:y}, ${6:z}, ${7:nx}, ${8:ny}, ${9:nz}, ${10:angle}, ${11:concentration});
endsnippet

#camera
snippet cam "camera"
camera(${1:eyeX}, ${2:eyeY}, ${3:eyeZ}, ${4:centerX}, ${5:centerY}, ${6:centerZ}, ${7:upX}, ${8:upY}, ${9:upZ});
endsnippet

snippet cam "ortho"
ortho(${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${6:far});
endsnippet

snippet cam "begin camera"
beginCamera();
endsnippet

snippet cam "end camera"
endCamera();
endsnippet

snippet cam "print camera"
printCamera();
endsnippet

snippet cam "print camera projection"
printProjection();
endsnippet

snippet cam "perspective camera"
perspective(${1:fov}, ${2:aspect}, ${3:zNear}, ${4:zFar});
endsnippet

snippet cam "frustrum"
frustrum(${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${6:far});
endsnippet

#transformations
snippet trans "rotate"
rotate${1:X}(${1:angle});
endsnippet

snippet trans "translate"
translate(${1:x}, ${2:y}${3:, }${4:z});
endsnippet

snippet trans "scale size"
scale(${1:size});
endsnippet

snippet trans "scale"
scale(${1:x}, ${2:y}${3:, }${4:z});
endsnippet

#coordinates
snippet coord "coord"
${1:model/screen}${2:X}(${3:x}, ${4:y}, ${5:z});
endsnippet

#effects
snippet fx "brightness"
brightness(${1:color});
endsnippet

snippet fx "lerp color"
lerpColor(${1:c1}, ${2:c2}, ${3:amt});
endsnippet

snippet fx "saturation"
saturation(${1:color});
endsnippet

snippet fx "hue"
hue(${1:color});
endsnippet

snippet fx "alpha"
alpha(${1:color});
endsnippet

snippet fx "tint"
tint(${1:value1}, ${2:value2}, ${3:value3}${4:, }${5:alpha});
endsnippet

snippet fx "notint"
noTint();
endsnippet

#pixel
snippet px "set pixel"
set(${1:x}, ${2:y}, ${3:color/image});
endsnippet

snippet px "update pixel"
updatePixels();
endsnippet

snippet px "load pixel"
loadPixels();
endsnippet

snippet px "pixels"
pixels[${1:index}]
endsnippet

snippet px "get pixel"
get(${1:x}, ${2:y}${3:, }${4:width}${5:, }${6:height});
endsnippet

#geometric figures
snippet geof "triangle"
triangle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3});
endsnippet

snippet geof "line"
line(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2});
endsnippet

snippet geof "line 3D"
line(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2});
endsnippet

snippet geof "arc"
arc(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:start}, ${6:stop});
endsnippet

snippet geof "point"
point(${1:x}, ${2:y}${3:, }${4:z});
endsnippet

snippet geof "quad"
quad(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:x4}, ${8:y4});
endsnippet

snippet geof "ellipse"
ellipse(${1:x}, ${2:y}, ${3:width}, ${4:height});
endsnippet

snippet geof "rect"
rect(${1:x}, ${2:y}, ${3:width}, ${4:height});
endsnippet

snippet geof "box"
box(${1:width}, ${2:height}, ${3:depth});
endsnippet

snippet geof "sphere"
sphere(${1:radius});
endsnippet

snippet geof "sphere details"
sphereDetail(${1:n});
endsnippet

snippet geof "set smooth"
smooth();
endsnippet

snippet geof "set no smooth"
noSmooth();
endsnippet

#array operations
snippet arrop "normal split"
split("${1:str}"${2: , }${3:delimiter});
endsnippet

snippet arrop "split Tokens"
splitTokens(${1:str}${2:, }${3:tokens});
endsnippet

snippet arrop "join"
join(${1:strgArray}${2: , }${3:seperator});
endsnippet

snippet arrop "shorten"
shorten(${1:array});
endsnippet

snippet arrop "concat"
concat(${1:array1}, ${2:array2});
endsnippet

snippet arrop "subset"
subset(${1:array}, ${2:offset});
endsnippet

snippet arrop "append"
append(${1:array}, ${2:element});
endsnippet

snippet arrop "reverse"
reverse(${1:array});
endsnippet

snippet arrop "splice"
splice(${1:array}, ${2:value/array2}, ${3:index});
endsnippet

snippet arrop "sort"
sort(${1:dataArray}${2:, }${3:count});
endsnippet

snippet arrop "expand"
expand(${1:array}${2:, }${3:newSize});
endsnippet

snippet arrop "array copy"
arrayCopy(${1:src}, ${2:dest}, ${3:, }${3:length});
endsnippet

#string operations
snippet strop "str"
str("${1:str}");
endsnippet

snippet strop "match"
match(${1:str}, ${2:regexp});
endsnippet

snippet strop "trim"
trim(${1:str});
endsnippet

snippet strop "nf"
nf(${2:value}, ${3:left}${4:, }${5:right});
endsnippet

snippet strop "nfs"
nfs(${2:value}, ${3:left}${4:, }${5:right});
endsnippet

snippet strop "nfp"
nfp(${2:value}, ${3:left}${4:, }${5:right});
endsnippet

snippet strop "nfc"
nfc(${1:value}${2:, }${3:right});
endsnippet

#convert
snippet convert "unbinary"
unbinary("${1:str}"});
endsnippet

snippet convert "hexadecimal"
hex(${1:c});
endsnippet

snippet convert "unhex"
unhex(${1:c});
endsnippet

snippet convert "binary"
binary(${1:value}${2:, }${3:digits});
endsnippet

#image operations
snippet image "load image"
loadImage(${1:filename});
endsnippet

snippet image "image"
image(${1:img}, ${2:x}, ${3:y}${4:, }${5:width}${6:, }${7:height});
endsnippet

snippet copy "copy"
copy(${1:srcImg}${2:, }${3:x}, ${4:y}, ${5:width}, ${6:height}, ${7:dx}, ${8:dy}, ${9:dwidth}, ${10:dheight});
endsnippet

#containers
snippet bg "bg"
background(${1:value1}, ${2:value2}, ${3:value3}${4:, }${5:alpha});
endsnippet

snippet pg "pg"
PGraphics pg;
pg = createGraphics(${1:width}, ${2:height}${3:, }${4:applet});
endsnippet

snippet pimage "pimage"
PImage(${1:width}, ${2:height});
endsnippet

#UTILS
#nofill
snippet nofill "nofill"
noFill();
endsnippet

#fill
snippet fill "fill"
fill(${1:value1}, ${2:value2}, ${3:value3}${4:, }${5:alpha});
endsnippet

#red
snippet red "red"
red(${1:color});
endsnippet

#green
snippet green "green"
green(${1:color});
endsnippet

#blue
snippet blue "blue"
blue(${1:color});
endsnippet

#status
snippet status "status"
status(${1:text});
endsnippet

#param
snippet param "param"
param(${1:s});
endsnippet

#link
snippet link "link"
link(${1:url}${2:, }${3:target});
endsnippet

#@param
snippet @ "@"
@${1:param/return/private/public}  ${1:parameter}  ${2:description}
endsnippet


