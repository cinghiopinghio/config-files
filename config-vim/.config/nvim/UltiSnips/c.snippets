## Main
# main
snippet main "main"
int main(int argc, const char *argv[])
{
	${1}
	return 0;
}
endsnippet

# main(void)
snippet mainn "mainn"
int main(void)
{
	${1}
	return 0;
}
endsnippet

##
## Preprocessor 
# #include <...>
snippet inc "inc"
#include <${1:stdio}.h>${2}
endsnippet

# #include "..."
snippet Inc "Inc"
#include "${1:`!v Filename("$1.h")`}"${2}
endsnippet

# ifndef...define...endif
snippet ndef "ndef"
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif${3}
endsnippet

# define
snippet def "def"
#define
endsnippet

# ifdef...endif
snippet ifdef "ifdef"
#ifdef ${1:FOO}
	${2:#define }
#endif${3}
endsnippet

# if
snippet #if "#if"
#if ${1:FOO}
	${2}
#endif
endsnippet

# header include guard
snippet once "once"
#ifndef ${1:`!v toupper(Filename('$1_H', 'UNTITLED_H'))`}
#define $1
${2}
#endif /* end of include guard: $1 */
endsnippet

##
## Control Statements
# if
snippet if "if"
if (${1:/* condition */}) {
	${2:/* code */}
}${3}
endsnippet

# else
snippet el "el"
else {
	${1}
}${3}
endsnippet

# else if
snippet elif "elif"
else if (${1:/* condition */}) {
	${2:/* code */}
}${3}
endsnippet

# ternary
snippet t "t"
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

# switch
snippet switch "switch"
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
}${7}
endsnippet

# switch without default
snippet switchndef "switchndef"
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
}${6}
endsnippet

# case
snippet case "case"
case ${1:/* variable case */}:
	${2}
	${3:break;}${4}
endsnippet

##
## Loops
# for
snippet for "for"
for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4:/* code */}
}${5}
endsnippet

# for (custom)
snippet forr "forr"
for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
	${5:/* code */}
}${6}
endsnippet

# while
snippet wh "wh"
while (${1:/* condition */}) {
	${2:/* code */}
}${3}
endsnippet

# do... while
snippet do "do"
do {
	${2:/* code */}
} while (${1:/* condition */});${3}
endsnippet

##
## Functions
# function definition
snippet fun "fun"
${1:void} ${2:function_name}(${3})
{
	${4:/* code */}
}${5}
endsnippet

# function declaration
snippet fund "fund"
${1:void} ${2:function_name}(${3});${4}
endsnippet

##
## Types
# typedef
snippet td "td"
typedef ${1:int} ${2:MyCustomType};${3}
endsnippet

# struct
snippet st "st"
struct ${1:`!v Filename('$1_t', 'name')`} {
	${2:/* data */}
}${3: /* optional variable list */};${4}
endsnippet

# typedef struct
snippet tds "tds"
typedef struct ${2:_$1 }{
	${3:/* data */}
} ${1:`!v Filename('$1_t', 'name')`};${4}
endsnippet

# typedef enum
snippet tde "tde"
typedef enum {
	${1:/* data */}
} ${2:foo};${3}
endsnippet

##
## Input/Output
# printf
snippet pr "pr"
printf("${1:%s}\n"${2});${3}
endsnippet

# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr "fpr"
fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
endsnippet

# getopt
snippet getopt "getopt"
int choice;
while (1)
{
	static struct option long_options[] =
	{
		/* Use flags like so:
		{"verbose",	no_argument,	&verbose_flag, 'V'}*/
		/* Argument styles: no_argument, required_argument, optional_argument */
		{"version", no_argument,	0,	'v'},
		{"help",	no_argument,	0,	'h'},
		${1}
		{0,0,0,0}
	};
	int option_index = 0;
	/* Argument parameters:
		no_argument: " "
		required_argument: ":"
		optional_argument: "::" */
	choice = getopt_long( argc, argv, "vh",
				long_options, &option_index);
	if (choice == -1)
		break;
	switch( choice )
	{
		case 'v':
			${2}
			break;
		case 'h':
			${3}
			break;
		case '?':
			/* getopt_long will have already printed an error */
			break;
		default:
			/* Not sure how to get here... */
			return EXIT_FAILURE;
	}
}
/* Deal with non-option arguments here */
if ( optind < argc )
{
	while ( optind < argc )
	{
		${4}
	}
}
endsnippet

##
## Miscellaneous
# This is kind of convenient
snippet . "."
[${1}]${2}
endsnippet

# GPL
snippet gpl "gpl"
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * Copyright (C) ${1:Author}, `!v strftime("%Y")`
 */
${2}
endsnippet


