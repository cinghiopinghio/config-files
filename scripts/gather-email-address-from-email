#!/usr/bin/env python2

from __future__ import print_function
import email
import email.header
import os,sys
import re
import codecs
import configobj

headers = ['To','From','Cc']
DATABASE = os.path.expanduser('~/.abook/addressbook')
TEST = os.path.expanduser('~/.mail/gmail/INBOX/cur/1395740369_0.4943.mercurio,U=3299,FMD5=7e33429f656f1e6e9d79b29c3f82c57e:2,S')

class DB():
    def __init__(self,filename=None):
        self.db = configobj.ConfigObj(filename,encoding='utf-8')
        self.extract_addresses()
    def extract_addresses(self):
        self.addresses = set()
        for contact in self.db:
            if 'email' in self.db[contact]:
                ems = self.db[contact]['email']
                if type(ems) in [unicode,str]:
                    self.addresses.add(ems)
                elif type(ems) == list:
                    for em in ems:
                        self.addresses.add(em)
    def __len__ (self):
        return len(self.db)-1

def load_file_header(filename=None):
    pass

def main():
    # load database
    db = DB(DATABASE)

    # load email
    #fl = sys.stdin
    #msg = email.message_from_file(fl)
    #fl.close()
    #sys.stdin = open("/dev/tty")

    with open(TEST,'r') as fin:
        msg = email.message_from_file(fin)
    print (msg['To'])
    exit()

    new_emails = {}
    ask = True
    for hdr in headers:
        new_emails[hdr] = add_header(msg[hdr],emails)
        print ('------------------')
        if len (new_emails[hdr]) > 0:
            print ('Emails in',hdr)
        else:
            print ('No emails in',hdr)
        for ml in new_emails[hdr]:
            print ('\n> add:')
            print (u'  {0:>25s} <{1:s}>'.format(ml[0],ml[1]))
            if ask:
                print ('  [Nyea] ',end='')
                inp = raw_input('').lower()
                send_to_database (ml,inp)
                if inp == 'a': ask =False
            else:
                send_to_database (ml,'y')
    print (' The END. (press ENTER)')
    raw_input('')

def send_to_database (email, user_input='n'):
    if user_input == 'y' or user_input == 'a':
        add_to_database(email[0],email[1])
    elif user_input == 'e':
        name = raw_input('Insert new name ')
        add_to_database(name,email[1])
    else:
        pass

def add_to_database(name, email):
    old = False
    with open (DATABASE,'r') as fin:
        for line in fin:
            l = line.strip().split('=')
            if len(l) == 1 and len(l[0]) > 0:
                indx = l[0].strip('[]')
            elif len(l) == 2:
                if l[0] == 'email' and email in l[1].split(','):
                    print ('Mail already present in the database')
                    old = True

    if not old:
        indx = int(indx)
        with codecs.open (DATABASE,'a','utf-8') as fout:
            print (u'[{0:d}]'.format(indx+1),file=fout)
            print (u'name={0:s}'.format(name),file=fout)
            print (u'email={0:s}'.format(email),file=fout)
            print (u'',file=fout)

def add_header(string,emails=[]):
    '''Read the header and return al list of (name,email) tuple
    '''
    if string is None or string == '':
        return []

    s = u''
    for p,e in email.header.decode_header(string):
        if e == None:
            s += p
        else:
            s += unicode(p,e)
    string = s

    lst = [ml for ml in string.split(',') if '@' in ml]
    mail_lst = []
    for ml in lst:
        reg_ml = re.split('[<>]', ml)
        if len (reg_ml) == 1:
            if reg_ml[0].strip() not in emails:
                mail_lst.append((u'',reg_ml[0].strip()))
        else:
            if reg_ml[1].strip() not in emails:
                mail_lst.append((reg_ml[0].strip(),reg_ml[1].strip()))

    return mail_lst

def extract_addresses(db):
    emails = set()
    for contact in db:
        if 'email' in db[contact]:
            ems = db[contact]['email']
            if type(ems) in [unicode,str]:
                emails.add(ems)
            elif type(ems) == list:
                for em in ems:
                    emails.add(em)
    return emails


if __name__ == '__main__':
    main()
