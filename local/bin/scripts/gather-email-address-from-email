#!/usr/bin/env python2

from __future__ import print_function
import email.header
import os,sys
import re
import configobj
import tempfile

HEADERS = ['To','From','Cc']
DATABASE = os.path.expanduser('~/.abook/addressbook')
TEST = os.path.expanduser('~/.mail/gmail/INBOX/cur/1395740369_0.4943.mercurio,U=3299,FMD5=7e33429f656f1e6e9d79b29c3f82c57e:2,S')

class DB():
    def __init__(self,filename=None):
        self.db = configobj.ConfigObj(filename,encoding='utf-8')
        self.extract_addresses()
        for sec in self.db:
            if sec != 'format':
                self.N = int(sec)
    def extract_addresses(self):
        self.addresses = set()
        for contact in self.db:
            if 'email' in self.db[contact]:
                ems = self.db[contact]['email']
                if type(ems) in [unicode,str]:
                    self.addresses.add(ems)
                elif type(ems) == list:
                    for em in ems:
                        self.addresses.add(em)
    def append(self,name,address):
        self.N +=1
        self.db[str(self.N)] = {'name':name, 'email':address}

    def write(self,filename='tmp'):
        #self.db.filename = filename
        #self.db.write()
        # weird trick to remove spaces around ' = '
        tmpdir = tempfile.mkdtemp()
        self.db.filename = tmpdir+'/tmpdata'
        self.db.write()

        with open(tmpdir+'/tmpdata','r') as fin:
            flines = fin.readlines()

        with open(filename,'w') as fout:
            for line in flines:
                if '=' not in line:
                    print (line.strip('\n'),file=fout)
                else:
                    print (line.strip('\n').replace(' = ','=',1),file=fout)
        # I don't delete the temp directory just in case (for now)

    def __len__ (self):
        return len(self.db)-1

def main():
    # load database
    db = DB(DATABASE)

    # load email
    new_emails = load_file_header(filename='stdin',db=db)
    
    db = add_to_database(new_emails,db)
    db.write(DATABASE)

def load_file_header(filename=None,db=None):
    '''get filename as stdin and return name-emails as dictionary'''
    if filename is not None:
        fl = sys.stdin
        msg = email.message_from_file(fl)
        fl.close()
        # re-active the stdin
        sys.stdin = open("/dev/tty")
    else:
        with open(TEST,'r') as fin:
            msg = email.message_from_file(fin)
    
    new_emails = {}
    for hdr in HEADERS:
        new_emails[hdr] = add_header(msg[hdr],db)
    return new_emails

def add_header(string,db):
    '''Read the header and return al list of (name,email) tuple
    '''
    if string is None or string == '':
        return []

    s = u''
    for p,e in email.header.decode_header(string):
        if e == None:
            s += p
        else:
            s += unicode(p,e)
    string = s

    lst = [ml for ml in string.split(',') if '@' in ml]
    mail_lst = []
    for ml in lst:
        reg_ml = re.split('[<>]', ml)
        if len (reg_ml) == 1:
            address = reg_ml[0].strip().lower()
            if address not in db.addresses:
                mail_lst.append((u'',address))
        else:
            address = reg_ml[1].strip().lower()
            if address not in db.addresses:
                mail_lst.append((reg_ml[0].strip().strip("'\""),address))

    return mail_lst

def add_to_database(new_emails,db):
    emails_to_add = []
    ask = True
    for hdr in HEADERS:
        print ('------------------')
        if len (new_emails[hdr]) > 0:
            print ('Emails in',hdr)
        else:
            print ('No emails new in',hdr)
        for ml in new_emails[hdr]:
            print (u'> add:  {0:>25s} <{1:s}>'.format(ml[0],ml[1]),end='')
            if ask:
                print ('  [Nyea] ',end='')
                inp = raw_input('').lower()
                nm,ad = user_check (ml,inp)
                if ad is not None:
                    db.append(nm,ad)
                if inp == 'a': ask =False
            else:
                nm,ad = user_check (ml,'y')
                if ad is not None:
                    db.append(nm,ad)
                    print ('   added!!!')
    print (' The END. (press ENTER)')
    raw_input('')
    return db

def user_check (contact, user_input='n'):
    if user_input == 'y' or user_input == 'a':
        return contact
    elif user_input == 'e':
        name = raw_input('Insert new name: ')
        return (name,contact[1])
    else:
        return None,None

if __name__ == '__main__':
    main()
