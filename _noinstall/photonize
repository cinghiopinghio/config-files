#!/usr/bin/env bash

COMMAND="photonize"

# Default params
# copy from here
INFOLDER='.'
#copy to here
OUTFOLDER=${HOME}/grafica/foto
COMMENT=''
DRY=false
VERB=false

#FORMATS
# %Y = year
# %m = month
# $d = day
# %H = hour
# %M = mins
# %S = secs
# ID = use camera file basename
# out folder format 2014/2014-12-15
FOL_FORMAT='%Y/%Y-%m-%d'
# out file format 20141215-FILENAME.EXTERNSION
FIL_FORMAT='%Y%m%d-ID'

CACHE=${XDG_CACHE_HOME:-~/.cache}
CONFIG=${XDG_CONFIG_HOME:-~/.config}


# Execute getopt
ARGS=$(getopt -o f:t:nv -l "from:,to:,dry,verbose" -n "photonize" -- "$@");


#Bad arguments
if [ $? -ne 0 ];
then
  exit 1
fi

eval set -- "$ARGS";

while true; do
  case "$1" in
    -f|--from)
      shift;
      if [ -n "$1" ]; then
        INFOLDER=$1
        shift;
      fi
      ;;
    -t|--to)
      shift;
      if [ -n "$1" ]; then
        OUTFOLDER=$1
        shift;
      fi
      ;;
    -n|--dry)
      shift;
      echo -e "\n--- Dry Run ---\n"
      DRY=true
      ;;
    -v|--verbose)
      shift;
      VERB=true
      ;;
    --)
      shift;
      break;
      ;;
  esac
done

function log () {
    if [[ "$VERB" == "true" ]]; then
        echo "$@"
    fi
}

log "Installing from folder: ${INFOLDER}"
log "Installing to folder:   ${OUTFOLDER}"

function sanitize {
  echo "$1" | iconv -s -c -f utf8 -t ascii//TRANSLIT//IGNORE |\
    sed -e 's/[^a-zA-Z0-9._]/-/g'
}

function frmt {
  # change date format to formats
  # input: date format ID
  str=$(date -u -d"$1" +"$2")
  str=$(echo $str | sed "s|ID|$3|")
  echo ${str,,} # lowercase everything
}

[[ -e "${CONFIG}/${COMMAND}" ]] && last=$(cat ${CONFIG}/${COMMAND})\
                                || last=0 

for f in $(find ${INFOLDER} -type f);
do
  mime=$(file --mime-type $f | sed -r 's|.*: (.*)/.*|\1|')
  extension=${f##*.}
  basename=$(basename ${f} .${extension})
  extension=${extension,,}

  datetime=$(exiftool -s3 -DateTimeOriginal $f |\
             sed -r 's|:|-|' |\
             sed -r 's|:|-|')
  [[ $(date -d $datetime 2>>/dev/null) ]] || datetime=$(stat -c "%y" $f)

  log "file - $f"
  log "base - $basename"
  log "ext  - $extension"
  log "mime - $mime"
  log "date - $datetime"
  fol=$(frmt "$datetime" "$FOL_FORMAT" $basename)
  fil=$(frmt "$datetime" "$FIL_FORMAT" $basename)
  destination=${OUTFOLDER}/${fol}/${fil}.${extension}

  if [[ "$DRY" == 'true' ]];
  then
    echo "--- file source : $f"
    echo "--- file target : ${destination}"
  else
    cp $f $destination
  fi

done


echo fine $destination
# TODO: mettere un link a un file cache per la prossima volta copiare solo
# file +nuovi (usando "newer" in find)
exit



TMPFOL=$(mktemp -d --tmpdir ${COMMAND}-XXXX)
last=$(cat )


# this produce the folder struct
for f in $(find ${INFOLDER} -type f);
do
  mime=$(file --mime-type $f | sed -r 's|.*: (.*)/.*|\1|')
  extension=${f##*.}
  basename=$(basename ${f} .${extension})
  extension=${extension,,}
  #echo $f, $mime, $extension
  case $mime in 
    image)
      # time format ready for date
      time=$(exiv2 -g Exif.Image.DateTime -q -Pv $f |\
             sed -r 's|:|-|' |\
             sed -r 's|:|-|')
      fol=$(frmt "$time" "$FOL_FORMAT")
      fil=$(frmt "$time" "$FIL_FORMAT")
      mkdir -p $TMPFOL/$fol
      
      if [[ ! -e "$TMPFOL/$fol/$basename-preview1.jpg" ]];
      then
        exiv2 -ep1 -q -l $TMPFOL/$fol $f &>>/dev/null
        #cp $f $TMPFOL/$fol
      fi
      ;;
    video)
      echo "to be done (copy a frame to tmpfol)"
      #avconv -ss 00:03:00 -i $f -frames:v 1 timefile.jpg
      lenght=$(ffmpeg -i $f  2>&1 |\
        sed -nr 's/.*Duration: (.*)\..., start.*/\1/p')
      time=$(ffmpeg -i $f  2>&1 |\
        sed -nr '/.*creation_time.*: (.*)/{s//\1/p; q}')
      half=$(echo $lenght | awk -F ':' '{print ($3+$2*60+$1*3600)/2}')
      echo $time

      fol=$(frmt "$time" "$FOL_FORMAT")
      fil=$(frmt "$time" "$FIL_FORMAT")
      mkdir -p $TMPFOL/$fol

      ffmpeg -ss $half -i $f -vcodec mjpeg -vframes 1 $TMPFOL/$fol/$basename.jpg
      ;;
    *)
      echo "not an interesting file"
      ;;
  esac
done


# here we need the actual copy stuff better if on a subprocess


# ask for comments (tags?) and rename folders 
for tmpf in $(find ${TMPFOL} -type d -links 2);
do
  day=$(basename $tmpf)
  folname=${tmpf/$TMPFOL}
  sxiv -ft -r $tmpf
  echo -e "\nAdd a comment to the previous folder ($day): "
  read comment
  comment=$(sanitize "$comment")
  outf=$OUTFOLDER$folname-$comment
  echo $outf

done

# remove temporal folder with thumbnails
rm -r $TMPFOL

