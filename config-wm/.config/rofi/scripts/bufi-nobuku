#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
This scipt interacts with buku database through the rofi interface to:
- search for bookmarks
- add new bookmarks
- remove bookmarks from db
- edit bookmarks
"""

import json
import glob
import os
import sqlite3
import time
import shutil
import tempfile
import sys
import urllib
from urllib.parse import urlparse

import subprocess
import lz4.block

sys.path.append('/usr/bin')
from xdg.BaseDirectory import xdg_cache_home
import rofi

# Format:
# 0: index
# 1: url
# 2: title
# 3: tags
# 4: boh

INIT = 16
CACHE = xdg_cache_home + '/bufi.json'

MOZ_SESSION = '~/.mozilla/firefox/*.default/places.sqlite'
MOZ_SESSION = '~/.mozilla/firefox/*.default/sessionstore-backups/recovery.js*'

CUSTOM_KB = ['Alt+n', 'Alt+e', 'Alt+x']
MESG = """\
Hint: use <b>{}</b> to add a new bookmark      <b>{}</b> to edit the bookmark
          <b>{}</b> to remove it from the db""".format(*CUSTOM_KB)

ROWFORMAT = '{0:4d} {2:s} <span size="small" weight="ultralight" stretch="ultracondensed"><i>{1:s}</i>{3} {4}</span>'
ROWFORMAT_ICON = '{0:4d} {2:s} <span size="small" weight="ultralight" stretch="ultracondensed"><i>{1:s}</i>{3} {4}</span>\x00icon\x1f{6}'


def get_iconpath(url, cachedir):
    url = urlparse(url)
    baseurl = url.scheme + '://' + url.netloc
    filename_it = glob.iglob(os.path.join(cachedir, url.netloc) + '*')
    try:
        filename = next(filename_it)
    except StopIteration:
        return 'web-browser', baseurl  # , os.path.join(cachedir, url.netloc) * ".png"
    return filename, baseurl


def make_string(ms_args, cache=xdg_cache_home + '/bukuicon'):
    ''' Create the output string in pango format for each line.
    input:
        ms_args: [id, url, title, keywords, comments]
    '''

    iconfile = get_iconpath(ms_args[1], cache)[0]
    ms_args = [ms if ms is not None else "" for ms in ms_args]
    if iconfile is None:
        return ROWFORMAT.format(*ms_args).replace('&', '&amp;')
    return ROWFORMAT_ICON.format(*ms_args, iconfile).replace('&', '&amp;')


def frecency(item, now, indx):
    """ compute the frecency of `item`. """
    from_now = now - item[2]
    if indx != item[0]:
        # if not visited last week: punish it
        if from_now > 604800:
            item[1] -= 10
        return item
    item[1] = int(item[1] + min(100, 8640000 / from_now))
    item[2] = now
    return item


def copy_to_tmp(filepath):
    """Return file-object"""
    # tmpfile = tempfile.NamedTemporaryFile('r+b', prefix='bufi')
    tmpfile, tmpfname = tempfile.mkstemp(prefix='bufi', suffix='.sqlite')
    shutil.copy(filepath, tmpfname)
    return tmpfname


def get_moz_places_bak(flpath):
    conn = sqlite3.connect(flpath, timeout=1)
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT * FROM moz_places')
    except sqlite3.OperationalError:
        conn.close()
    else:
        all_rows = cursor.fetchall()
        conn.close()
        return all_rows

    tmpfl = copy_to_tmp(flpath)
    conn = sqlite3.connect(tmpfl)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM moz_places')
    all_rows = cursor.fetchall()
    return all_rows


def get_moz_places(flpath):
    with open(flpath, 'rb') as fin:
        b = fin.read()
        if b[:8] == b'mozLz40\0':
            b = lz4.block.decompress(b[8:])
    j = json.loads(b)
    # for w in j['windows']:
    #     for t in w['tabs']:
    #         i = t['index'] - 1
    #         print(template % (
    #             t['entries'][i]['title'],
    #             t['entries'][i]['url']
    #             ))

    return [
        {
            'title': t['entries'][t['index'] - 1]['title'],
            'url': t['entries'][t['index'] - 1]['url'],
            'time': t['lastAccessed'],
            'icon': t['image'][25:]  # this remove 'data:image/x-icon;base64,'
        }
        for w in j['windows'] for t in w['tabs']
    ]


def buku_add_new_from_firefox(buku_database):
    """
    add new bookmark from open tabs (firefox)
    """
    tabs = {}
    for fname in glob.glob(os.path.expanduser(MOZ_SESSION)):
        all_rows = get_moz_places(fname)

        for tab in all_rows:
            tabs[tab['time']] = tab

    tabs = [
        (k, tab['url'], tab['title'], k, ' ', ' ')
        for k, tab in sorted(tabs.items())
    ]
    # tabs = [tabs[k][0] + ' ' + tabs[k][1]
    #         for k in sorted(tabs.keys(), reverse=True)]
    rf_nb = rofi.Rofi(
        tabs,
        markup=False,
        prompt='New Bookmark: ',
        row_formatter=make_string,
    )

    choice, exitcode = rf_nb.run()

    if choice != '' and exitcode == 0:
        buku_database.add_rec(choice.split()[0])


def buku_remove_bookmark(line, buku_database):
    """
    remove the given bookmark from the database
    """
    bm_i = int(line.split()[0])
    rf_nb = rofi.Rofi(
        ['Yes', 'No'],
        prompt='New Bookmark:',
        mesg='Are you sure you want to delete: ' + line
    )
    line, exitcode = rf_nb.run()

    if line == 'Yes' and exitcode == 0:
        buku_database.delete_rec(bm_i)


def buku_edit_bookmark(line, buku_database):
    """
    Edit bookmark in external editor
    """
    bm_i = int(line.split()[0])
    os.environ['EDITOR'] = 'nvim-gtk'
    buku_database.edit_update_rec(bm_i)


class Database():
    def __init__(self):

        with open(os.path.expanduser('~/bookmarks.json'), 'rt') as fin:
            data = json.load(fin)

        self.data = {d['id']: d for d in data}

    def get_rec_all(self):
        return [(
            item['id'],
            item['URL'],
            item['metadata'],
            item['tags'],
            item['desc'],
            ' '
        ) for item in self.data.values()]

    def get_rec_by_id(self, index):
        item = self.data[index]
        return [item['id'], item['URL'], item['metadata'], item['tags'], item['desc']]


def main():
    """ THE MAIN """

    # Get the cache (most used bookmarks)
    try:
        with open(CACHE, 'rt') as fin:
            hist = json.load(fin)
    except FileNotFoundError:
        hist = []

    # get all bookmarks from buku
    # buku_database = buku.BukuDb()
    buku_database = Database()
    # save a dict and forget about the order
    bk_map = {a[0]: a for a in buku_database.get_rec_all()}

    buku_hist = []
    # get db items present in history
    buku_hist += [bk_map.pop(h[0]) for h in hist if h[0] in bk_map]
    buku_hist += [v for v in bk_map.values()]
    now = int(time.time())

    rofi_out = rofi.Rofi(
        # [make_string(tpl) for tpl in buku_hist],
        buku_hist,
        prompt='Bookmarks: ',
        mesg=MESG,
        custom_kb=CUSTOM_KB,
        args=['-matching', 'normal'],
        row_formatter=make_string,
    )
    try:
        choice, exitcode = rofi_out.run()
    except BrokenPipeError:
        raise

    if exitcode == 10:
        # add new bookmark from open tabs (firefox)
        buku_add_new_from_firefox(buku_database)
    elif exitcode == 11:
        # edit the entry
        buku_edit_bookmark(choice, buku_database)
    elif exitcode == 12:
        # remove url from database
        buku_remove_bookmark(choice, buku_database)
    elif exitcode == 0:
        # if no output exits
        if choice == '':
            exit(0)

        # read indx from line
        try:
            indx = int(choice.split()[0])
        except ValueError:
            # import webbrowser
            # webbrowser.open('https://ddg.gg/?q=' + choice, autoraise=True)
            subprocess.call(["firefox", 'https://ddg.gg/?q=' + choice])
            exit(0)

        # open url
        # buku.browse.suppress_browser_output = False
        rec = buku_database.get_rec_by_id(indx)
        if rec is not None:
            # print(rec)
            subprocess.call(["firefox", rec[1]], shell=False)
        # buku_database.browse_by_index(indx)

        subprocess.call(["wmctrl", "-a", os.environ.get("BROWSER", "Firefox")])

        # update the history
        hist = [frecency(h, now, indx) for h in hist]
        # append the new ones (if not present)
        if indx not in [h[0] for h in hist]:
            hist.append([indx, INIT, now])
        # sort the history
        hist = sorted(hist, key=lambda x: x[1], reverse=True)

        # cache history
        with open(CACHE, 'wt') as fout:
            json.dump([fl for fl in hist if fl[1] > 0], fout)


if __name__ == "__main__":
    main()
