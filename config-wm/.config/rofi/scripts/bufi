#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import json
import glob
import os
import sqlite3
import time

import buku
import rofi
from xdg.BaseDirectory import xdg_cache_home

# Format:
# 0: index
# 1: url
# 2: title
# 3: tags
# 4: boh

LINE_LENGHT = 99
PANGO_STEP = 1.2
CACHE = xdg_cache_home + '/bufi.json'

MOZ_SESSION = '~/.mozilla/firefox/*.default/places.sqlite'
# frmt = '{0:4d} {2}\n' +\
#        '     <span size="x-small">{1:30s}</span>'


def make_string(*ms_args):
    ''' Create the output string in pango format for each line '''
    return '{0:4d} {2:s} <span size="x-small"><i>{1:s}</i>{3} {4}</span>'\
        .format(*ms_args)


def frecency(item, now, indx):
    if indx != item[0]:
        item[1] -= 1
        return item
    try:
        from_now = now - item[2]
    except IndexError:
        item[1] += 50
        return item + [now]
    item[1] = int(item[1] + min(100, 8640000 / from_now))
    return item


frmt = '{0:4d} {2:50s} <span size="x-small">{1}</span>'
args = sys.argv[1:]
MAX = 1000000
INIT = 16

CUSTOM_KB = ['Alt+n', 'Alt+e', 'Alt+x']
MESG = """\
Hint: use <b>{}</b> to add a new bookmark       <b>{}</b> to edit the bookmark
          <b>{}</b> to remove it from the db""".format(*CUSTOM_KB)

# Get the cache (most used bookmarks)
try:
    with open(CACHE, 'rt') as fin:
        hist = json.load(fin)
except FileNotFoundError:
    hist = []

# get all bookmarks from buku
db = buku.BukuDb()
buku_db = db.get_rec_all()
# save a dict and forget about the order
bk_map = {a[0]: a for a in buku_db}

# get db items present in history
buku_hist = [bk_map.pop(h[0]) for h in hist if h[0] in bk_map]
buku_hist += [v for v in bk_map.values()]
now = int(time.time())

rf = rofi.Rofi(
    [make_string(*tpl).replace('&', '&amp;')
     for tpl in buku_hist],
    prompt='Bookmarks: ',
    mesg=MESG,
    custom_kb=CUSTOM_KB
)
choice, exitcode = rf.run()

if exitcode == 10:
    # add new bookmark from open tabs (firefox)
    tabs = {}
    for fname in glob.glob(os.path.expanduser(MOZ_SESSION)):
        conn = sqlite3.connect(fname)
        c = conn.cursor()
        c.execute('SELECT * FROM moz_places')
        all_rows = c.fetchall()

        for row in all_rows:
            # check if time last access
            if row[9] is not None:
                # check if url and title are not None
                url = row[1] if row[1] is not None else ''
                title = row[2] if row[2] is not None else ''
                tabs[row[9]] = (url, title, ' ')

    tabs = [tabs[k][0] + ' ' + tabs[k][1]
            for k in sorted(tabs.keys(), reverse=True)]
    rf_nb = rofi.Rofi(
        tabs,
        markup=False,
        prompt='New Bookmark: ',
    )

    choice, exitcode = rf_nb.run()

    if choice != '' and exitcode == 0:
        db.add_rec(choice.split()[0])
elif exitcode == 11:
    # edit the entry
    bm_i = int(choice.split()[0])
    os.environ['EDITOR'] = 'nvim-pygtk3'
    db.edit_update_rec(bm_i)
elif exitcode == 12:
    # remove url from database
    bm_i = int(choice.split()[0])
    rf_nb = rofi.Rofi(
        ['Yes', 'No'],
        prompt='New Bookmark:',
        mesg='Are you sure you want to delete: ' + choice
    )
    choice, exitcode = rf_nb.run()

    if choice == 'Yes' and exitcode == 0:
        print(choice, exitcode, bm_i)
        db.delete_rec(bm_i)
elif exitcode == 0:
    # if no output exits or search the web
    if choice == '':
        exit(0)

    # read indx from line
    try:
        indx = int(choice.split()[0])
    except ValueError:
        import webbrowser
        webbrowser.open('https://ddg.gg/?q=' + choice, autoraise=True)
        exit(0)

    # open url
    buku.browse.suppress_browser_output = False
    db.browse_by_index(indx)

    # update the history
    hist = [frecency(h, now, indx) for h in hist]
    # append the new ones (if not present)
    if indx not in [h[0] for h in hist]:
        hist.append([indx, INIT, now])
    # sort the history
    hist = sorted(hist, key=lambda x: x[1], reverse=True)

    # cache history
    with open(CACHE, 'wt') as fout:
        json.dump([fl for fl in hist if fl[1] > 0], fout)
