#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
This scipt interacts with buku database through the rofi interface to:
- search for bookmarks
- add new bookmarks
- remove bookmarks from db
- edit bookmarks
"""

import sys
import json
import glob
import os
import sqlite3
import time

import buku
from xdg.BaseDirectory import xdg_cache_home
import rofi

# Format:
# 0: index
# 1: url
# 2: title
# 3: tags
# 4: boh

INIT = 16
LINE_LENGHT = 99
PANGO_STEP = 1.2
CACHE = xdg_cache_home + '/bufi.json'

MOZ_SESSION = '~/.mozilla/firefox/*.default/places.sqlite'

CUSTOM_KB = ['Alt+n', 'Alt+e', 'Alt+x']
MESG = """\
Hint: use <b>{}</b> to add a new bookmark      <b>{}</b> to edit the bookmark
          <b>{}</b> to remove it from the db""".format(*CUSTOM_KB)


def make_string(*ms_args):
    ''' Create the output string in pango format for each line '''
    return '{0:4d} {2:s} <span size="x-small"><i>{1:s}</i>{3} {4}</span>'\
        .format(*ms_args)


def frecency(item, now, indx):
    """ compute the frecency of `item`. """
    if indx != item[0]:
        item[1] -= 1
        return item
    try:
        from_now = now - item[2]
    except IndexError:
        item[1] += 50
        return item + [now]
    item[1] = int(item[1] + min(100, 8640000 / from_now))
    return item


def buku_add_new_from_firefox(buku_database):
    """
    add new bookmark from open tabs (firefox)
    """
    tabs = {}
    for fname in glob.glob(os.path.expanduser(MOZ_SESSION)):
        conn = sqlite3.connect(fname)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM moz_places')
        all_rows = cursor.fetchall()

        for row in all_rows:
            # check if time last access
            if row[9] is not None:
                # check if url and title are not None
                url = row[1] if row[1] is not None else ''
                title = row[2] if row[2] is not None else ''
                tabs[row[9]] = (url, title, ' ')

    tabs = [tabs[k][0] + ' ' + tabs[k][1]
            for k in sorted(tabs.keys(), reverse=True)]
    rf_nb = rofi.Rofi(
        tabs,
        markup=False,
        prompt='New Bookmark: ',
    )

    choice, exitcode = rf_nb.run()

    if choice != '' and exitcode == 0:
        buku_database.add_rec(choice.split()[0])


def buku_remove_bookmark(line, buku_database):
    """
    remove the given bookmark from the database
    """
    bm_i = int(line.split()[0])
    rf_nb = rofi.Rofi(
        ['Yes', 'No'],
        prompt='New Bookmark:',
        mesg='Are you sure you want to delete: ' + line
    )
    line, exitcode = rf_nb.run()

    if line == 'Yes' and exitcode == 0:
        buku_database.delete_rec(bm_i)


def buku_edit_bookmark(line, buku_database):
    """
    Edit bookmark in external editor
    """
    bm_i = int(line.split()[0])
    os.environ['EDITOR'] = 'nvim-pygtk3'
    buku_database.edit_update_rec(bm_i)


def main():
    """ THE MAIN """

    # Get the cache (most used bookmarks)
    try:
        with open(CACHE, 'rt') as fin:
            hist = json.load(fin)
    except FileNotFoundError:
        hist = []

    # get all bookmarks from buku
    buku_database = buku.BukuDb()
    # save a dict and forget about the order
    bk_map = {a[0]: a for a in buku_database.get_rec_all()}

    # get db items present in history
    buku_hist = [bk_map.pop(h[0]) for h in hist if h[0] in bk_map]
    buku_hist += [v for v in bk_map.values()]
    now = int(time.time())

    rofi_out = rofi.Rofi(
        [make_string(*tpl).replace('&', '&amp;')
         for tpl in buku_hist],
        prompt='Bookmarks: ',
        mesg=MESG,
        custom_kb=CUSTOM_KB
    )
    choice, exitcode = rofi_out.run()

    if exitcode == 10:
        # add new bookmark from open tabs (firefox)
        buku_add_new_from_firefox(buku_database)
    elif exitcode == 11:
        # edit the entry
        buku_edit_bookmark(choice, buku_database)
    elif exitcode == 12:
        # remove url from database
        buku_remove_bookmark(choice, buku_database)
    elif exitcode == 0:
        # if no output exits
        if choice == '':
            exit(0)

        # read indx from line
        try:
            indx = int(choice.split()[0])
        except ValueError:
            import webbrowser
            webbrowser.open('https://ddg.gg/?q=' + choice, autoraise=True)
            exit(0)

        # open url
        buku.browse.suppress_browser_output = False
        buku_database.browse_by_index(indx)

        # update the history
        hist = [frecency(h, now, indx) for h in hist]
        # append the new ones (if not present)
        if indx not in [h[0] for h in hist]:
            hist.append([indx, INIT, now])
        # sort the history
        hist = sorted(hist, key=lambda x: x[1], reverse=True)

        # cache history
        with open(CACHE, 'wt') as fout:
            json.dump([fl for fl in hist if fl[1] > 0], fout)


if __name__ == "__main__":
    main()
