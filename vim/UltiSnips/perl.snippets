# #!/usr/bin/perl
snippet #! "#!"
#!/usr/bin/env perl
endsnippet

# Hash Pointer
snippet . "."
=>
endsnippet

# Function
snippet sub "sub"
sub ${1:function_name} {
	${2:#body ...}
}
endsnippet

# Conditional
snippet if "if"
if (${1}) {
	${2:# body...}
}
endsnippet

# Conditional if..else
snippet ife "ife"
if (${1}) {
	${2:# body...}
}
else {
	${3:# else...}
}
endsnippet

# Conditional if..elsif..else
snippet ifee "ifee"
if (${1}) {
	${2:# body...}
}
elsif (${3}) {
	${4:# elsif...}
}
else {
	${5:# else...}
}
endsnippet

# Conditional One-line
snippet xif "xif"
${1:expression} if ${2:condition};${3}
endsnippet

# Unless conditional
snippet unless "unless"
unless (${1}) {
	${2:# body...}
}
endsnippet

# Unless conditional One-line
snippet xunless "xunless"
${1:expression} unless ${2:condition};${3}
endsnippet

# Try/Except
snippet eval "eval"
local $@;
eval {
	${1:# do something risky...}
};
if (my $e = $@) {
	${2:# handle failure...}
}
endsnippet

# While Loop
snippet wh "wh"
while (${1}) {
	${2:# body...}
}
endsnippet

# While Loop One-line
snippet xwh "xwh"
${1:expression} while ${2:condition};${3}
endsnippet

# C-style For Loop
snippet cfor "cfor"
for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:# body...}
}
endsnippet

# For loop one-line
snippet xfor "xfor"
${1:expression} for @${2:array};${3}
endsnippet

# Foreach Loop
snippet for "for"
foreach my $${1:x} (@${2:array}) {
	${3:# body...}
}
endsnippet

# Foreach Loop One-line
snippet fore "fore"
${1:expression} foreach @${2:array};${3}
endsnippet

# Package
snippet package "package"
package ${1:`!v substitute(Filename('', 'Page Title'), '^.', '\u&', '')`};
${2}
1;
__END__
endsnippet

# Package syntax perl >= 5.14
snippet packagev514 "packagev514"
package ${1:`!v substitute(Filename('', 'Page Title'), '^.', '\u&', '')`} ${2:0.99};
${3}
1;
__END__
endsnippet

#moose
snippet moose "moose"
use Moose;
use namespace::autoclean;
${1:#}BEGIN {extends '${2:ParentClass}'};
${3}
endsnippet

# parent
snippet parent "parent"
use parent qw(${1:Parent Class});
endsnippet

# Read File
snippet slurp "slurp"
my $${1:var} = do { local $/; open my $file, '<', "${2:file}"; <$file> };
${3}
endsnippet

# strict warnings
snippet strwar "strwar"
use strict;
use warnings;
endsnippet

# older versioning with perlcritic bypass
snippet vers "vers"
## no critic
our $VERSION = '${1:version}';
eval $VERSION;
## use critic
endsnippet

# new 'switch' like feature
snippet switch "switch"
use feature 'switch';
endsnippet

# Anonymous subroutine
snippet asub "asub"
sub {
 	${1:# body }
}
endsnippet

# Begin block
snippet begin "begin"
BEGIN {
	${1:# begin body}
}
endsnippet

# call package function with some parameter
snippet pkgmv "pkgmv"
__PACKAGE__->${1:package_method}(${2:var})
endsnippet

# call package function without a parameter
snippet pkgm "pkgm"
__PACKAGE__->${1:package_method}()
endsnippet

# call package "get_" function without a parameter
snippet pkget "pkget"
__PACKAGE__->get_${1:package_method}()
endsnippet

# call package function with a parameter
snippet pkgetv "pkgetv"
__PACKAGE__->get_${1:package_method}(${2:var})
endsnippet

# complex regex
snippet qrx "qrx"
qr/
     ${1:regex}
/xms
endsnippet

#simpler regex
snippet qr/ "qr/"
qr/${1:regex}/x
endsnippet

#given
snippet given "given"
given ($${1:var}) {
	${2:# cases}
	${3:# default}
}
endsnippet

# switch-like case
snippet when "when"
when (${1:case}) {
	${2:# body}
}
endsnippet

# hash slice
snippet hslice "hslice"
@{ ${1:hash}  }{ ${2:array} }
endsnippet

# map
snippet map "map"
map {  ${2: body }    }  ${1: @array } ;
endsnippet

# Pod stub
snippet ppod "ppod"
=head1 NAME
${1:ClassName} - ${2:ShortDesc}
=head1 SYNOPSIS
  use $1;
  ${3:# synopsis...}
=head1 DESCRIPTION
${4:# longer description...}
=head1 INTERFACE
=head1 DEPENDENCIES
=head1 SEE ALSO
endsnippet

# Heading for a subroutine stub
snippet psub "psub"
=head2 ${1:MethodName}
${2:Summary....}
endsnippet

# Heading for inline subroutine pod
snippet psubi "psubi"
=head2 ${1:MethodName}
${2:Summary...}
=cut
endsnippet

# inline documented subroutine
snippet subpod "subpod"
=head2 $1
Summary of $1
=cut
sub ${1:subroutine_name} {
	${2:# body...}
}
endsnippet

# Subroutine signature
snippet parg "parg"
=over 2
=item
Arguments
=over 3
=item
C<${1:DataStructure}>
  ${2:Sample}
=back
=item
Return
=over 3
=item
C<${3:...return data}>
=back
=back
endsnippet

# Moose has
snippet has "has"
has ${1:attribute} => (
	is	    => '${2:ro|rw}',
	isa 	=> '${3:Str|Int|HashRef|ArrayRef|etc}',
	default => sub {
		${4:defaultvalue}
	},
	${5:# other attributes}
);
endsnippet

# override
snippet override "override"
override ${1:attribute} => sub {
	${2:# my $self = shift;};
	${3:# my ($self, $args) = @_;};
};
endsnippet

# use test classes
snippet tuse "tuse"
use Test::More;
use Test::Deep; # (); # uncomment to stop prototype errors
use Test::Exception;
endsnippet

# local test lib
snippet tlib "tlib"
use lib qw{ ./t/lib };
endsnippet

#test methods
snippet tmeths "tmeths"
$ENV{TEST_METHOD} = '${1:regex}';
endsnippet

# runtestclass
snippet trunner "trunner"
use ${1:test_class};
$1->runtests();
endsnippet

# Test::Class-style test
snippet tsub "tsub"
sub t${1:number}_${2:test_case} :Test(${3:num_of_tests}) {
	my $self = shift;
	${4:#  body}
}
endsnippet

# Test::Routine-style test
snippet trsub "trsub"
test ${1:test_name} => { description => '${2:Description of test.}'} => sub {
	my ($self) = @_;
	${3:# test code}
};
endsnippet

#prep test method
snippet tprep "tprep"
sub prep${1:number}_${2:test_case} :Test(startup) {
	my $self = shift;
	${4:#  body}
}
endsnippet

# cause failures to print stack trace
snippet debug_trace "debug_trace"
use Carp; # 'verbose';
# cloak "die"
# warn "warning"
$SIG{'__DIE__'} = sub {
	require Carp; Carp::confess
};
endsnippet


