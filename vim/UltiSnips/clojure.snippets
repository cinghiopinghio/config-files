snippet comm "comm"
(comment
  ${1}
  )
endsnippet

snippet condp "condp"
(condp ${1:pred} ${2:expr}
  ${3})
endsnippet

snippet def "def"
(def ${1})
endsnippet

snippet defm "defm"
(defmethod ${1:multifn} "${2:doc-string}" ${3:dispatch-val} [${4:args}]
  ${5})
endsnippet

snippet defmm "defmm"
(defmulti ${1:name} "${2:doc-string}" ${3:dispatch-fn})
endsnippet

snippet defma "defma"
(defmacro ${1:name} "${2:doc-string}" ${3:dispatch-fn})
endsnippet

snippet defn "defn"
(defn ${1:name} "${2:doc-string}" [${3:arg-list}]
  ${4})
endsnippet

snippet defp "defp"
(defprotocol ${1:name}
  ${2})
endsnippet

snippet defr "defr"
(defrecord ${1:name} [${2:fields}]
  ${3:protocol}
  ${4})
endsnippet

snippet deft "deft"
(deftest ${1:name}
    (is (= ${2:assertion})))
  ${3})
endsnippet

snippet is "is"
(is (= ${1} ${2}))
endsnippet

snippet defty "defty"
(deftype ${1:Name} [${2:fields}]
  ${3:Protocol}
  ${4})
endsnippet

snippet doseq "doseq"
(doseq [${1:elem} ${2:coll}]
  ${3})
endsnippet

snippet fn "fn"
(fn [${1:arg-list}] ${2})
endsnippet

snippet if "if"
(if ${1:test-expr}
  ${2:then-expr}
  ${3:else-expr})
endsnippet

snippet if-let "if-let"
(if-let [${1:result} ${2:test-expr}]
	(${3:then-expr} $1)
	(${4:else-expr}))
endsnippet

snippet imp "imp"
(:import [${1:package}])
& {:keys [${1:keys}] :or {${2:defaults}}}
endsnippet

snippet let "let"
(let [${1:name} ${2:expr}]
	${3})
endsnippet

snippet letfn "letfn"
(letfn [(${1:name) [${2:args}]
          ${3})])
endsnippet

snippet map "map"
(map ${1:func} ${2:coll})
endsnippet

snippet mapl "mapl"
(map #(${1:lambda}) ${2:coll})
endsnippet

snippet met "met"
(${1:name} [${2:this} ${3:args}]
  ${4})
endsnippet

snippet ns "ns"
(ns ${1:name}
  ${2})
endsnippet

snippet dotimes "dotimes"
(dotimes [_ 10]
  (time
    (dotimes [_ ${1:times}]
      ${2})))
endsnippet

snippet pmethod "pmethod"
(${1:name} [${2:this} ${3:args}])
endsnippet

snippet refer "refer"
(:refer-clojure :exclude [${1}])
endsnippet

snippet require "require"
(:require [${1:namespace} :as [${2}]])
endsnippet

snippet use "use"
(:use [${1:namespace} :only [${2}]])
endsnippet

snippet print "print"
(println ${1})
endsnippet

snippet reduce "reduce"
(reduce ${1:(fn [p n] ${3})} ${2})
endsnippet

snippet when "when"
(when ${1:test} ${2:body})
endsnippet

snippet when-let "when-let"
(when-let [${1:result} ${2:test}]
	${3:body})
endsnippet


